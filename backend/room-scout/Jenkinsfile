pipeline {
    agent any

    triggers {
        // Este trigger solo ejecutar치 el pipeline cuando haya un push a la rama 'main'
        githubPush()
    }

    tools {
        jdk 'JDK17' // Reemplaza con tu versi칩n de JDK configurada en Jenkins
        gradle 'GRADLE_HOME' // Reemplaza con tu configuraci칩n de Gradle en Jenkins
        dockerTool 'docker'
    }

    environment {
        DOCKER_IMAGE = 'juancorral/room-scout-backend'
        DOCKER_CREDENTIALS = 'dockerhub-credentials-id' // ID de credenciales de DockerHub
    }

    stages {
        stage('Clonar Repositorio') {
            steps {
                git branch: 'main', url: 'https://github.com/arizaxel16/Room-Scout.git'
            }
        }

        stage('Configurar Permisos') {
            steps {
                dir('backend/room-scout') {
                    sh 'chmod +x gradlew'
                }
            }
        }
        stage('Compilar') {
            steps {
                dir('backend/room-scout') {
                    sh './gradlew clean assemble --daemon'
                }
            }
        }
        stage('Limpiar Todos los Daemons Gradle') {
            steps {
                dir('backend/room-scout') {
                    // Intentar detener los Daemons de Gradle de forma ordenada
                    sh './gradlew --stop || true'
                    // Matar cualquier proceso de Daemon de Gradle de forma forzada, en caso de que los anteriores no se hayan detenido
                    sh "pkill -f 'org.gradle.launcher.daemon.bootstrap.GradleDaemon' || true"
                }
           }
        }

        stage('Pruebas') {
            steps {
                dir('backend/room-scout') {
                    sh './gradlew test --daemon'
                }
            }
        }
        stage('Generar Reporte de Cobertura') {
            steps {
                dir('backend/room-scout') {
                    sh './gradlew jacocoTestReport --daemon'
                }
            }
        }
        stage('Obtener Nombre de Rama') {
            steps {
                script {
                    def branchName = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    echo "Branch Name: ${branchName}"
                    env.BRANCH_NAME = branchName
                }
            }
        }

        stage('An치lisis SonarQube') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    dir('backend/room-scout') {
                        sh './gradlew sonarqube'
                    }
                }
            }
        }

        stage('Esperar Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Construir Imagen Docker') {
            steps {
                script {
                    def image = docker.build("${DOCKER_IMAGE}:${env.BRANCH_NAME}-${env.BUILD_NUMBER}", "backend/room-scout/")                    
                    sh "docker images"
                }
            }
        }

        stage('Trivy Vulnerability Scan') {
            steps {
                script {
                    sh """
                    docker run --rm \
                      -v /var/run/docker.sock:/var/run/docker.sock \
                      -v $HOME/Library/Caches:/root/.cache/ \
                      aquasec/trivy image --severity HIGH,CRITICAL \
                      ${DOCKER_IMAGE}:${env.BRANCH_NAME}-${env.BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Subir Imagen a DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS}") {
                        def image = docker.image("${DOCKER_IMAGE}:${env.BRANCH_NAME}-${env.BUILD_NUMBER}")
                        image.push()
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                sh "docker rmi ${DOCKER_IMAGE}:${env.BRANCH_NAME}-${env.BUILD_NUMBER} || true"
                sh 'docker rm -f trivy_scan || true'
            }
            junit 'backend/room-scout/build/test-results/test/*.xml'
            cleanWs()
        }
        failure {
            echo 'Build Failed'
        }
        success {
            echo 'Build Succeeded'
        }
    }
}
