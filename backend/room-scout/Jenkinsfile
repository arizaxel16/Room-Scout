pipeline {
    agent any

    triggers {
        githubPush() // Escucha los eventos del webhook de GitHub
    }

    tools {
        jdk 'JDK17' // Reemplaza con tu versión de JDK configurada en Jenkins
        gradle 'GRADLE_HOME' // Reemplaza con tu configuración de Gradle en Jenkins
        dockerTool 'docker'
    }

    environment {
        DOCKER_IMAGE = 'juancorral/room-scout-backend'
        DOCKER_CREDENTIALS = 'dockerhub-credentials-id' // ID de credenciales de DockerHub
    }

    stages {
        stage('Clonar Repositorio') {
                    steps {
                        git branch: 'main', url: 'https://github.com/arizaxel16/Room-Scout.git'
                    }
                }

        stage('Configurar Permisos') {
            when {
                expression {
                    // Verifica si el PR es hacia la rama 'main'
                    return env.CHANGE_TARGET == 'main'
                }
            }
            steps {
                dir('backend/room-scout') {
                    sh 'chmod +x gradlew'
                }
            }
        }

        stage('Compilar y Construir') {
            when {
                expression {
                    // Verifica si el PR es hacia la rama 'main'
                    return env.CHANGE_TARGET == 'main'
                }
            }
            steps {
                dir('backend/room-scout') {
                    sh './gradlew clean build --daemon'
                }
            }
        }
        stage('Obtener Nombre de Rama') {
            when {
                expression {
                    // Verifica si el PR es hacia la rama 'main'
                    return env.CHANGE_TARGET == 'main'
                }
            }
            steps {
                script {
                    // Obtener el nombre de la rama usando git
                    def branchName = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    echo "Branch Name: ${branchName}"
                    env.BRANCH_NAME = branchName  // Asignar el nombre de la rama a la variable BRANCH_NAME
                }
            }
        }
        stage('Run Tests with Coverage') {
            when {
                expression {
                    // Verifica si el PR es hacia la rama 'main'
                    return env.CHANGE_TARGET == 'main'
                }
            }
            steps {
                dir('backend/room-scout') {
                    sh './gradlew test jacocoTestReport --daemon'  // Ejecuta los tests y genera el reporte de cobertura
                }
            }
        }

        stage('Análisis SonarQube') {
            when {
                expression {
                    // Verifica si el PR es hacia la rama 'main'
                    return env.CHANGE_TARGET == 'main'
                }
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    dir('backend/room-scout') {
                        sh './gradlew sonarqube'
                    }
                }
            }
        }

        stage('Esperar Quality Gate') {
            when {
                expression {
                    // Verifica si el PR es hacia la rama 'main'
                    return env.CHANGE_TARGET == 'main'
                }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Construir Imagen Docker') {
            when {
                expression {
                    // Verifica si el PR es hacia la rama 'main'
                    return env.CHANGE_TARGET == 'main'
                }
            }
            steps {
                script {
                    def image = docker.build("${DOCKER_IMAGE}:${env.BRANCH_NAME}-${env.BUILD_NUMBER}", "backend/room-scout/")

                    sh "docker images"
                }
            }
        }

        stage('Trivy Vulnerability Scan') {
            when {
                expression {
                    // Verifica si el PR es hacia la rama 'main'
                    return env.CHANGE_TARGET == 'main'
                }
            }
            steps {
                script {
                    sh """
                    docker run --rm \
                      -v /var/run/docker.sock:/var/run/docker.sock \
                      -v $HOME/Library/Caches:/root/.cache/ \
                      aquasec/trivy image --severity HIGH,CRITICAL \
                      ${DOCKER_IMAGE}:${env.BRANCH_NAME}-${env.BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Subir Imagen a DockerHub') {
            when {
                expression {
                    // Verifica si el PR es hacia la rama 'main'
                    return env.CHANGE_TARGET == 'main'
                }
            }
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS}") {
                        def image = docker.image("${DOCKER_IMAGE}:${env.BRANCH_NAME}-${env.BUILD_NUMBER}")
                        image.push()
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                        sh "docker rmi ${DOCKER_IMAGE}:${env.BRANCH_NAME}-${env.BUILD_NUMBER} || true"
                        sh 'docker rm -f trivy_scan || true'
                    }
            junit 'backend/room-scout/build/test-results/test/*.xml'
            cleanWs()
        }
        failure {
            echo 'Build Failed'
        }
        success {
            echo 'Build Succeeded'
        }
    }
}