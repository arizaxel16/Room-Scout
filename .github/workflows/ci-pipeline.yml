name: CI Pipeline with SonarQube

on:
  pull_request:
    branches:
      - "main"  # Trigger on PR to 'main' branch

jobs:
  sonarQubeAnalysis:
    runs-on: ubuntu-latest

    services:
      # Run SonarQube in a container during the job
      sonarqube:
        image: sonarqube:community  # Use the official SonarQube Docker image
        options: >-
          --health-cmd='curl --fail http://localhost:9000/api/system/health'
          --health-interval=5s
          --health-timeout=30s
          --health-retries=10
          --name sonarqube
        ports:
          - 9000:9000  # Expose SonarQube web UI at port 9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"  # Disable bootstrap checks for Elasticsearch

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up JDK 17 (since the backend is Spring Boot, you need JDK)
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Step 3: Build the backend project (Gradle example)
    - name: Build with Gradle
      run: ./gradlew clean build --no-daemon -p backend  # Run Gradle build for the backend

    # Step 4: Wait for SonarQube to be ready
    - name: Wait for SonarQube to be ready
      run: |
        echo "Waiting for SonarQube to be ready..."
        until curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; do
          echo "Waiting for SonarQube..."
          sleep 10
        done

    # Step 5: Run SonarQube Analysis
    - name: Run SonarQube Analysis
      env:
        SONAR_HOST_URL: http://localhost:9000  # Point to SonarQube in Docker container
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Use the secret for SonarQube token
      run: |
        ./gradlew sonarqube \
          -Dsonar.projectKey=my-backend-project \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN \
          -p backend  # Specify the backend folder

    # Step 6: Check code coverage (optional, only if using a tool like JaCoCo)
    - name: Verify Code Coverage (optional)
      run: ./gradlew jacocoTestReport -p backend  # Run Jacoco code coverage report
