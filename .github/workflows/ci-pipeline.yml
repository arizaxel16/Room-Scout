name: CI Pipeline with SonarQube

on:
  pull_request:
    branches:
      - main  # Trigger on PR to 'main' branch

jobs:
  sonarQubeAnalysis:
    runs-on: ubuntu-latest

    # Services: Start a SonarQube container to perform the analysis
    services:
      sonarqube:
        image: sonarqube:community  # Use the official SonarQube Docker image
        options: >
          --health-cmd="curl --fail http://localhost:9000/api/system/health || exit 1"  # Check if SonarQube is up and running
          --health-interval=5s  # Interval between health checks
          --health-timeout=30s  # Timeout for health check
          --health-retries=10  # Number of retries before failing the container
        ports:
          - 9000:9000  # Expose SonarQube web UI at port 9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"  # Disable Elasticsearch bootstrap checks

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 (required for the backend Spring Boot project)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Build the backend project using Gradle
      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon -p backend  # Run Gradle build for the backend

      # Step 4: Wait for SonarQube to be ready
      - name: Wait for SonarQube to be ready
        run: |
          echo "Waiting for SonarQube to be ready..."
          until curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; do
            echo "Waiting for SonarQube..."
            sleep 10
          done

      # Step 5: Run SonarQube Analysis
      - name: Run SonarQube Analysis
        env:
          SONAR_HOST_URL: http://localhost:9000  # SonarQube URL inside the container
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Token from GitHub secrets
        run: |
          ./gradlew sonarqube \
            -Dsonar.projectKey=my-backend-project \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -p backend  # Specify the backend folder

      # Step 6: Check code coverage using JaCoCo (optional, but recommended)
      - name: Verify Code Coverage
        run: ./gradlew jacocoTestReport -p backend  # Run Jacoco test report

      # Step 7: Check if the coverage meets the 90% threshold
      - name: Check Code Coverage Threshold
        run: |
          COVERAGE=$(./gradlew jacocoTestReport -p backend --quiet | grep "Total" | awk '{print $4}' | sed 's/%//')
          echo "Code Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "Coverage is below 90%. Failing the job."
            exit 1
          fi

      # Step 8: Upload SonarQube report and display the result
      - name: Upload SonarQube Report
        run: |
          echo "SonarQube analysis complete. Check the report at: http://localhost:9000"
