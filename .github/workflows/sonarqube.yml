name: SonarQube analysis

on:
  push:
    branches:
      - main  # Trigger on pushes to the 'main' branch
  pull_request:
    branches:
      - main  # Trigger on PRs to the 'main' branch
  workflow_dispatch:  # Allows manual triggering from GitHub UI

permissions:
  pull-requests: write  # Required to add status checks to pull requests

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 (required for Spring Boot)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install Gradle
      - name: Install Gradle
        run: |
          wget https://services.gradle.org/distributions/gradle-7.5.1-bin.zip
          unzip gradle-7.5.1-bin.zip
          export PATH=$PWD/gradle-7.5.1/bin:$PATH
          gradle --version  # Verify Gradle installation

      # Step 4: Generate Gradle Wrapper (if missing)
      - name: Generate Gradle Wrapper
        run: gradle wrapper

      # Step 5: Build with Gradle (now that gradlew is available)
      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon -p backend  # Runs Gradle build for backend project

      # Step 6: Analyze with SonarQube
      - name: Analyze with SonarQube
        uses: SonarSource/sonarqube-scan-action@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token to get PR info
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # SonarQube token from secrets
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # SonarQube URL from secrets
        with:
          args: |
            -Dsonar.projectKey=com:room-scout
            -Dsonar.sources=src/main/java  # Path to main source files (default is the project base directory)
            -Dsonar.tests=src/test/java  # Path to test files (default is the project base directory)
            -Dsonar.java.binaries=build/classes  # Path to compiled class files (for Java projects)
            -Dsonar.junit.reportPaths=build/test-results/test  # Path to JUnit test report
            -Dsonar.jacoco.reportPaths=build/jacoco/test.exec  # Path to JaCoCo code coverage report

      # Step 7: Verify Code Coverage
      - name: Verify Code Coverage
        run: |
          COVERAGE=$(./gradlew jacocoTestReport -p backend --quiet | grep "Total" | awk '{print $4}' | sed 's/%//')
          echo "Code Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "Coverage is below 90%. Failing the job."
            exit 1
          fi

      # Step 8: Upload SonarQube Report
      - name: Upload SonarQube Report
        run: |
          echo "SonarQube analysis complete. Check the report at: ${{ secrets.SONAR_HOST_URL }}/dashboard?id=my-backend-project"
